package api.test;




import org.apache.commons.logging.impl.AvalonLogger;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import com.github.javafaker.Faker;

import api.endpoints.UserEndPoints2;
import api.payload.User;
import io.restassured.response.Response;

public class UserTests2 {

  Faker faker;
  User userPayload;
  public Logger logger; // for logs
private Object payload;

 @BeforeClass
   public void Data()
   {
      faker = new Faker();
      userPayload = new User();

      userPayload.setId(faker.idNumber().hashCode());
      userPayload.setUsername(faker.name().username());
      userPayload.setFirstName(faker.name().firstName());
      userPayload.setLastName(faker.name().lastName());
      userPayload.setEmail(faker.internet().safeEmailAddress());
      userPayload.setPassword(faker.internet().password(5,10));
      userPayload.setPhone(faker.phoneNumber().cellPhone());

      // logs

      AvalonLogger = LogManager.getLogger(this.getClass()); 
      logger.debug("debugging")
   }
 
 @Test(priority = 1)
 public void testPostUser() 
{
  logger.info("********** Creating user *****************");
  Response response = UserEndPoints2.createUser(userPayload);
  response.then().log().all();
  Assert.assertEquals(response.getStatusCode(), 200);
  logger.info("********** User is created ***********");

}


 @Test(priority = 2)
 public void testGetUserByName() 
{ 
  logger.info("********** Reading User Info **********");
  Response response = UserEndPoints2.readUser(this.userPayload.getUsername());
  response.then().log().all(); 
  Assert.assertEquals(response.getStatusCode(), 200);
  logger.info("********** User Info is displayed **********");

}

  @Test(priority = 3)
 public void testUpdateUserByName() 
{
  // update data using payload 

  logger.info("********** Updating User **********");
  userPayload.setFirstName(faker.name().firstName());
  userPayload.setLastName(faker.name().lastName());
  userPayload.setEmail(faker.internet().safeEmailAddress());
  
  Response response = UserEndPoints2.updateUser(this.userPayload.getUsername(), userPayload);
  response.then().log().body().statusCode(200); // Chi assertion 
  Assert.assertEquals(response.getStatusCode(), 200); // TestNG assertion
  logger.info("********** User is updated **********");

  // checking the data after update
  
  Response responseAfterupdate = UserEndPoints2.readUser(this.userPayload.getUsername());
  response.then().log().all(); 
  response.then().log().all();
Assert.assertEquals(response.getStatusCode(), 200);

}

@Test(priority=4)
public void testDeleteUserByName() 
{
    logger.info("********** Deleting User **********");
    Response response = UserEndPoints2.deleteUser(this.userPayload.getUsername());
    Assert.assertEquals(response.getStatusCode(), 200);
    logger.info("********** User deleted **********");

}
}
