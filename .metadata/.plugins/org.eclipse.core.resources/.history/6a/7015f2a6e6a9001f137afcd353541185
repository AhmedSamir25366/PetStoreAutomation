package api.test;


import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;


import com.github.javafaker.Faker;

import api.endpoints.UserEndpoints;
import api.payload.User;
import io.restassured.response.Response;


public class UserTests {
	
	Faker faker;
	User userPayload; // This is a variable from POJO class and we will send the data to it
	public Logger logger;
	
	@BeforeClass
	public void setupData()
	{
		faker = new Faker();
		userPayload = new User();
		
		
		userPayload.setId(faker.idNumber().hashCode()); // generate ID
		userPayload.setUsername(faker.name().username()); // generat username
		userPayload.setFirstName(faker.name().firstName()); // generat first name 
		userPayload.setLastName(faker.name().lastName()); // generat last name 
		userPayload.setEmail(faker.internet().safeEmailAddress()); // generat email 
		userPayload.setPassword(faker.internet().password(5,10)); // generat password 
		userPayload.setPhone(faker.phoneNumber().cellPhone()); // generat phone 
		
		// logs
		logger = LogManager.getLogger(this.getClass());
	}
	
	@Test(priority = 1)
	public void testPostUser() 
	{
		
		logger.info("Create a user");
		Response response = UserEndpoints.createUser(userPayload);
		response.then().log().all();
		
		// Validations
		Assert.assertEquals(response.getStatusCode(), 200);
	
	}
	
	@Test(priority = 2)
	public void testGetUserByName()
	{
		
		logger.info("Get a user");
		Response response = UserEndpoints.readUser(this.userPayload.getUsername());
		response.then().log().all();
		Assert.assertEquals(response.getStatusCode(), 200);
		
	}
	
	
	@Test(priority = 3)
	public void testUpdateUserByName()
	{
		
		logger.info("update a user");
		// update data using payload
		
		userPayload.setFirstName(faker.name().firstName()); // generat first name 
		userPayload.setLastName(faker.name().lastName()); // generat last name 
		userPayload.setEmail(faker.internet().safeEmailAddress()); // generat email 
		
		
		Response response = UserEndpoints.updateUser(this.userPayload.getUsername(), userPayload);
		response.then().log().body().statusCode(200);
		
		// checking data after update 
		Response responseAfterupdate = UserEndpoints.readUser(this.userPayload.getUsername());
		response.then().log().all();
		Assert.assertEquals(response.getStatusCode(), 200);
	
	}
	
	
	@Test(priority = 4)
	public void testDeleteUserByName()
	{
		logger.info("Delete a user");
		Response response = UserEndpoints.deleteUser(this.userPayload.getUsername());
		Assert.assertEquals(response.getStatusCode(), 200);
	}

}
