package day2;

import static io.restassured.RestAssured.*;

import static io.restassured.matcher.RestAssuredMatchers.*;

import static org.hamcrest.Matchers.*;

import java.util.HashMap;

import org.json.JSONObject;
import org.testng.annotations.Test;

public class DiffWaysToCreatePostRequestBody {
	String id;
	
	
	// hashmap collection
	// pojo class
	// org.json library
	// external json file
	
	
	// 1) Post request body using HashMap // creating a new student record
	
	/*
	//@Test(priority = 1)
	void testPostusingHashMap()
	{
		HashMap data = new HashMap();
		data.put("name", "Scott");
		data.put("location", "France");
		data.put("phone", "7364736473");
		String courseArr[] = {"C", "C++"}; // single dimensional Array which holds courses
		data.put("courses", courseArr);
		
		given()
		   .contentType("application/json")
		   .body(data)
		
		.when()
		   .post("http://localhost:3000/students")
		
		.then()
		   .statusCode(201)
		   .body("name", equalTo("Scott"))
		   .body("location", equalTo("France"))
		   .body("phone", equalTo("7364736473"))
		   .body("courses[0]", equalTo("C"))
		   .body("courses[1]", equalTo("C++"))
		   .header("Content-Type", "application/json") // Header type we are expecting
		   .log().all(); // to print the entire response body
	}
	
	
	// Deleting student record
	//@Test(priority = 2)
	//void testDelete()
	{
		given()
		
		.when()
		  .delete("http://localhost:3000/students/4")
		  
		.then()
		   .statusCode(200)
		   .log().all();
	}
	
	
	*/
	
	@Test(priority = 1) 
	void testPostusingJsonLibrary() 
	{
	    JSONObject data = new JSONObject();
	    data.put("name", "Ahmed");
	    data.put("location", "Italy");
	    data.put("phone", "84374873843");
	    String coursesArr[] = {"API'S" , "XML"};
	    data.put("courses", coursesArr);
	   

	   given()
	     .contentType("application/json")
	     .body(data.toString())

	   .when()
	       .post("http://localhost:3000/students")
	       .jsonPath().getString("id");
	     
	      
          .then()
	      .statusCode(201)
	      .body("name", equalTo("Ahmed"))
          .body("location" , equalTo("Italy"))
	      .body("phone", equalTo("84374873843"))
          .body("courses[0]",equalTo("API'S"))
          .body("courses[1]", equalTo("XML"))
	      .header("Content-Type", "application/json") 
          .log().all()
	  


	}


	@Test(priority = 2) 
	void testDelete() 
	{
	   given()
	   .when()
	      .delete("http://localhost:3000/students/4")

	   .then()
	      .statusCode(200);
	      

	}
	
	
	
	
	
	

}
